#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    f: 'format'
  },
  boolean: ['h'],
  string: ['f']
})

function showHelp () {
  console.log(`
  Description
    Quickly scaffold a page/layout/component/store module.

  Usage
    $ quasar new <p|page> [-f <option>] <page_file_name>
    $ quasar new <l|layout> [-f <option>] <layout_file_name>
    $ quasar new <c|component> [-f <option>] <component_file_name>
    $ quasar new <b|boot> [-f ts] <boot_name>
    $ quasar new <s|store> [-f ts] <store_module_name>

    # Examples:

    # Create src/pages/MyNewPage.vue:
    $ quasar new p MyNewPage

    # Create src/pages/MyNewPage.vue and src/pages/OtherPage.vue:
    $ quasar new p MyNewPage OtherPage

    # Create src/layouts/shop/Checkout.vue
    $ quasar new layout shop/Checkout.vue

    # Create src/layouts/shop/Checkout.vue with TypeScript options API
    $ quasar new layout -f ts-options shop/Checkout.vue

    # Create a store with TypeScript support
    $ quasar new store -f ts myStore

  Options
    --help, -h            Displays this message

    --format -f <option>  (optional) Use a supported format for the template
                          Option can be:
                             * ts-options - TS options API
                             * ts-composition - TS component API
                             * ts-class - TS class style syntax
                             * ts - use for TS boot file and store modules only
  `)
  process.exit(0)
}

if (argv.help) {
  showHelp()
}

const path = require('path')
const fs = require('fs')
const fse = require('fs-extra')

const { log, warn } = require('../lib/helpers/logger')
const appPaths = require('../lib/app-paths')
const defaultFilePath = 'default'

if (argv._.length < 2) {
  console.log()
  warn(`Wrong number of parameters (${argv._.length}).`)
  showHelp()
  process.exit(1)
}

let [ type, ...names ] = argv._
let format = argv.format || defaultFilePath

function showError (message, param) {
  console.log()
  warn(`${message}: ${param}`)
  showHelp()
}

if (!['p', 'page', 'l', 'layout', 'c', 'component', 's', 'store', 'b', 'boot'].includes(type)) {
  showError('Invalid asset type', type)
}

if (!['default', 'ts-options', 'ts-class', 'ts-composition', 'ts'].includes(format)) {
  showError('Invalid asset format', format)
}

if (format === 'ts' && !['b', 'boot', 's', 'store'].includes(type)) {
  showError('Please select a TypeScript variation for *.vue files, i.e ts-class. Current', format)
}

const isTypeScript = format === 'ts' || format.indexOf('ts-') > -1

// If they've supplied a TS format i.e ts-options and
// are creating a boot file / store then set format
// to TS as they're the same for all formats.
if (isTypeScript && ['b', 'boot', 's', 'store'].includes(type)) {
  format = 'ts'
}

if (type.length === 1) {
  const fullCmd = {
    p: 'page',
    l: 'layout',
    c: 'component',
    s: 'store',
    b: 'boot'
  }
  type = fullCmd[type]
}

function getPaths (asset, names) {
  return names.map(name => {
    const hasExtension = !asset.ext || (asset.ext && name.endsWith(asset.ext))
    const ext = hasExtension ? '' : asset.ext

    return appPaths.resolve.src(path.join(asset.folder, name + ext))
  })
}

function createFile (asset, file) {
  const relativePath = path.relative(appPaths.appDir, file)

  if (fs.existsSync(file)) {
    warn(`[SKIPPED] ${relativePath} already exists.`)
    console.log()
    return
  }

  fse.mkdirp(path.dirname(file))
  fse.copy(
    appPaths.resolve.cli(path.join('templates/app', format, type + (asset.ext || ''))),
    file,
    err => {
      if (err) {
        console.warn(err)
        warn(`[FAIL] Could not generate ${relativePath}.`)
        return
      }

      log(`Generated ${type}: ${relativePath}`)
      if (asset.reference) {
        log(`Make sure to reference it in ${asset.reference}`)
      }
      log()
    }
  )
}

const ext = isTypeScript ? '.ts' : '.js'
const mapping = {
  page: {
    folder: 'pages',
    ext: '.vue',
    reference: `src/router/routes${ext}`
  },
  layout: {
    folder: 'layouts',
    ext: '.vue',
    reference: `src/router/routes${ext}`
  },
  component: {
    folder: 'components',
    ext: '.vue'
  },
  store: {
    folder: 'store',
    install: true,
    reference: `src/store/index${ext}`
  },
  boot: {
    folder: 'boot',
    ext,
    reference: 'quasar.conf.js > boot'
  }
}

const asset = mapping[type]

const filesToCreate = getPaths(asset, names)

if (asset.install) {
  const folder = appPaths.resolve.src(asset.folder)

  if (!fs.existsSync(folder)) {
    fse.mkdirp(folder)
    fse.copy(
      appPaths.resolve.cli(`templates/store/${format}`),
      folder,
      err => {
        if (err) {
          console.warn(err)
          warn(`[FAIL] Could not generate src/${asset.folder}.`)
          return
        }

        log(`Generated src/${asset.folder}`)
        log()
      }
    )
  }
}

filesToCreate.forEach(file => {
  createFile(asset, file)
})

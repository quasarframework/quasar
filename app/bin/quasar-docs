#!/usr/bin/env node

const
  parseArgs = require('minimist'),
  chalk = require('chalk')

const
  logger = require('../lib/helpers/logger'),
  getApi = require('../lib/helpers/get-api'),
  openBrowser = require('../lib/helpers/open-browser'),
  QuasarConfig = require('../lib/quasar-config'),
  getQuasarCtx = require('../lib/helpers/get-quasar-ctx'),
  log = logger('app:docs'),
  warn = logger('app:docs', 'red')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    a: 'api',
    h: 'help'
  },
  boolean: ['a', 'h']
})

const item = argv._[0]

if (!item || argv.help) {
  console.log(`
  Description
    Opens a component documentation page

  Usage
    $ quasar docs <component/directive/Quasar plugin name>
    $ quasar docs [components|plugins|directives|extensions]

  Options
    --api, -a    Opens the API table URL
    --help, -h   Displays this message
  `)
  process.exit(0)
}

function docs (api, supplier, openOptions) {
  let apiAnchor, url

  if (supplier === void 0) {
    url = api.meta.url
    apiAnchor = api.meta.apiAnchor

    if (argv.api) {
      if (apiAnchor === false) {
        log(`${item} docs page does not contain an API anchor. Opening default page...`)
      }
      else {
        url += '#' + apiAnchor
      }
    }
  }
  else {
    if (!api.meta && !api.meta.url) {
      warn(`App Extension API file does not contain a definition for key 'meta.url'.`)
      process.exit(1)
    }

    url = api.meta.url
    apiAnchor = api.meta.apiAnchor

    if (argv.api && apiAnchor) {
      url += '#' + apiAnchor
    }
  }

  openBrowser(url, openOptions)
}

async function run () {
  try {
    const ctx = getQuasarCtx({
      mode: 'spa',
      dev: true
    })
    const quasarConfig = new QuasarConfig(ctx)

    try {
      await quasarConfig.prepare()
    } catch (e) {
      console.log(e)
      warn(`⚠️ [FAIL] quasar.conf.js has JS errors`)
      process.exit(1)
    }

    await quasarConfig.compile()

    const { api, supplier } = await getApi(item)

    console.log()
    console.log(` Found ${chalk.green(item)} ${api.type} API`)

    if (supplier === void 0) {
      console.log(` ${chalk.italic(`Supplied by Quasar Framework`)}`)
    }
    else {
      console.log(` ${chalk.italic(`Supplied by "${supplier}" App Extension`)}`)
    }

    docs(api, supplier, quasarConfig.getBuildConfig().__openOptions)
    console.log()
  } catch (e) {
    warn(e)
    process.exit(1)
  }
}

run()

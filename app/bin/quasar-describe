#!/usr/bin/env node

const
  parseArgs = require('minimist'),
  chalk = require('chalk')

const
  appPaths = require('../lib/app-paths'),
  logger = require('../lib/helpers/logger'),
  warn = logger('app:describe', 'red')

const printArgs = {
  p: 'props',
  s: 'slots',
  m: 'methods',
  e: 'events',
  v: 'value',
  a: 'arg',
  M: 'modifiers',
  i: 'injection',
  q: 'quasar'
}

const argv = parseArgs(process.argv.slice(2), {
  alias: Object.assign({
    h: 'help',
    f: 'filter'
  }, printArgs),
  boolean: ['h'].concat(Object.keys(printArgs)),
  string: ['f']
})

const item = argv._[0]

const filter = argv.filter;

const printFlags = {}
Object.values(printArgs).forEach(opt => {
  if (argv[opt])
    printFlags[opt] = true
})
const hasPrintFlags = Object.keys(printFlags).length > 0

if (!item || argv.help) {
  console.log(`
  Description
    Describes a component API for project's Quasar version being used

  Usage
    $ quasar describe <component-name>

    $ quasar describe QIcon

  Options
    --help, -h            Displays this message
    --filter, -f <filter> Filters the API
    --props, -p           Displays the API props
    --slots, -s           Displays the API slots
    --methods, -m         Displays the API methods
    --events, -e          Displays the API events
    --value, -v           Displays the API value
    --arg, -a             Displays the API arg
    --modifiers, -M       Displays the API modifiers
    --injection, -i       Displays the API injection
    --quasar, -q          Displays the API quasar conf options
  `)
  process.exit(0)
}

async function getApi (item) {
  try {
    const api = require(
      require.resolve(`quasar/dist/api/${item}.json`, {
        paths: [ appPaths.appDir ]
      })
    )
    return { api }
  }
  catch (e) {}

  const extensionJson = require('../lib/app-extension/extension-json')
  const extensions = Object.keys(extensionJson.getList())

  if (extensions.length > 0) {
    const Extension = require('../lib/app-extension/Extension.js')

    for (let ext of extensions) {
      const instance = new Extension(ext)
      const hooks = await instance.run({})

      if (hooks.describeApi !== void 0 && hooks.describeApi[item]) {
        const fs = require('fs')
        const file = hooks.describeApi[item]

        if (!fs.existsSync(file)) {
          warn(`⚠️  Extension(${instance.extId}): registerDescribeApi - there is no file at ${file}`)
          process.exit(1)
        }

        try {
          return {
            api: require(file),
            supplier: instance.extId
          }
        }
        catch (e) {
          warn(`⚠️  Extension(${instance.extId}): Malformed API file at ${file}`)
          process.exit(1)
        }
      }
    }
  }

  warn(`No API found for requested "${item}"`)
  warn()
  process.exit(1)
}

function getEventParams (event) {
  const params = event.params === void 0 || event.params.length === 0
    ? ''
    : Object.keys(event.params).join(', ')

  return ' -> function(' + params + ')'
}

function getMethodParams (method, noRequired) {
  if (!method.params || method.params.length === 0) {
    return ' ()'
  }

  if (noRequired === true) {
    return ` (${Object.keys(method.params).join(', ')})`
  }

  const params = Object.keys(method.params)
  const optionalIndex = params.findIndex(param => method.params[param].required !== true)

  const str = optionalIndex !== -1
    ? params.slice(0, optionalIndex).join(', ') +
      (optionalIndex < params.length
        ? '[' + (optionalIndex > 0 ? ', ' : '') + params.slice(optionalIndex).join(', ') + ']'
        : '')
    : params.join(', ')

  return ' (' + str + ')'
}

function getMethodReturnValue (method) {
  return ' => ' +
    (!method.returns
      ? 'void 0'
      : method.returns.type
    )
}

function getStringType (type) {
  return Array.isArray(type)
    ? type.join(' | ')
    : type
}

function printProp (prop, propName, indentLevel) {
  let indent = ' '.repeat(indentLevel)

  const type = getStringType(prop.type)

  if (propName !== void 0) {
    console.log(`${indent}${chalk.green(propName)} ${type ? `(${type})` : ''}${type !== 'Function' && prop.required ? chalk.red(' [Required]') : ''}${prop.reactive ? chalk.red(' [Reactive]') : ''}`)

    indentLevel += 2
    indent += '  '
  }

  console.log(`${indent}Description: ${prop.desc}`)
  if (type === 'Function') {
    console.log(`${indent}Function form:${getMethodParams(prop, true)}${getMethodReturnValue(prop)}`)
  }
  if (prop.sync) {
    console.log(`${indent}".sync" modifier required!`)
  }
  if (prop.link) {
    console.log(`${indent}Link: ${prop.link}`)
  }
  if (prop.values) {
    console.log(`${indent}Accepted values: ${prop.values.join(` | `)}`)
  }
  if (prop.default) {
    console.log(`${indent}Default value: ${prop.default}`)
  }
  if (prop.definition) {
    console.log(`${indent}Props:`)
    for (let propName in prop.definition) {
      printProp(prop.definition[propName], propName, indentLevel + 2)
    }
  }
  if (prop.params) {
    console.log(`${indent}Params:`)
    for (let propName in prop.params) {
      printProp(prop.params[propName], propName, indentLevel + 2)
    }
  }
  if (prop.returns) {
    console.log(`${indent}Returns ${getStringType(prop.returns.type)}:`)
    printProp(prop.returns, void 0, indentLevel + 2)
  }
  if (prop.scope) {
    console.log(`${indent}Scope:`)
    for (let propName in prop.scope) {
      printProp(prop.scope[propName], propName, indentLevel + 2)
    }
  }
  if (!prop.values && prop.examples !== void 0) {
    console.log(`${indent}Example${prop.examples.length > 1 ? 's' : ''}:`)
    prop.examples.forEach(example => {
      console.log(`${indent}  ${example}`)
    })
  }
}

function printProperties ({ props }) {
  console.log('\n ' + chalk.underline('Properties'))
  const filtered = Object.keys(props).filter(k => !filter || k.includes(filter))
  if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No properties*'))
  }
  else {
    for (let propName of filtered) {
      console.log()
      printProp(props[propName], propName, 3)
    }
  }
}

function printSlots ({ slots }) {
  console.log('\n ' + chalk.underline('Slots'))
  const filtered = Object.keys(slots).filter(k => !filter || k.includes(filter))
  if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No slots*'))
  }
  else {
    for (let slot of filtered) {
      console.log('\n   ' + chalk.green(slot))
      console.log('     ' + slots[slot].desc)
    }
  }
}

function printScopedSlots ({ scopedSlots }) {
  console.log('\n ' + chalk.underline('Scoped Slots'))
  const filtered = Object.keys(scopedSlots).filter(k => !filter || k.includes(filter))
  if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No scoped slots*'))
  }
  else {
    for (let slot of filtered) {
      console.log()
      printProp(scopedSlots[slot], slot, 3)
    }
  }
}

function printEvents ({ events, behavior = {} }) {
  console.log('\n ' + chalk.underline('Events'))

  const filtered = Object.keys(events).filter(k => !filter || k.includes(filter))

  if (behavior.$listeners !== void 0) {
    console.log(`\n   ${chalk.italic(behavior.$listeners.desc)}`)
  }
  else if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No events*'))
    return
  }

  for (let eventName of filtered) {
    const event = events[eventName]

    console.log('\n   @' + chalk.green(eventName) + getEventParams(event))
    console.log('     Description: ' + event.desc)
    if (!event.params) {
      console.log('     Parameters: ' + chalk.italic('*None*'))
    }
    else {
      console.log('     Parameters:')
      for (let paramName in event.params) {
        printProp(event.params[paramName], paramName, 7)
      }
    }
  }
}

function printMethods ({ methods }) {
  console.log('\n ' + chalk.underline('Methods'))
  const filtered = Object.keys(methods).filter(k => !filter || k.includes(filter))
  if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No methods*'))
  }
  else {
    for (let methodName of filtered) {
      const method = methods[methodName]
      console.log('\n   ' + chalk.green(methodName) + getMethodParams(method) + getMethodReturnValue(method))
      console.log('     ' + method.desc)
      if (method.params !== void 0) {
        console.log('     Parameters:')
        for (let paramName in method.params) {
          printProp(method.params[paramName], paramName, 7)
        }
      }

      if (method.returns !== void 0) {
        console.log(`     Returns ${getStringType(method.returns.type)}:`)
        printProp(method.returns, void 0, 7)
      }
    }
  }
}

function printValue ({ value }) {
  console.log('\n ' + chalk.underline('Value'))
  if (value === void 0) {
    console.log('\n   ' + chalk.italic('*No value*'))
  }
  else {
    console.log('\n   Type:', value.type)
    printProp(value, void 0, 3)
  }
}

function printArg ({ arg }) {
  console.log('\n ' + chalk.underline('Arg'))
  if (arg === void 0) {
    console.log('\n   ' + chalk.italic('*No arg*'))
  }
  else {
    console.log('\n   Type:', arg.type)
    printProp(arg, void 0, 3)
  }
}

function printModifiers ({ modifiers }) {
  console.log('\n ' + chalk.underline('Modifiers'))
  const filtered = Object.keys(modifiers).filter(k => !filter || k.includes(filter))
  if (filtered === void 0 || Object.keys(filtered).length === 0) {
    console.log('\n   ' + chalk.italic('*No methods*'))
  }
  else {
    for (let modifierName of filtered) {
      const modifier = modifiers[modifierName]
      console.log('\n   ' + chalk.green(modifierName))
      printProp(modifier, void 0, 5)
    }
  }
}

function printInjection ({ injection }) {
  console.log('\n ' + chalk.underline('Injection'))
  if (injection === void 0) {
    console.log('\n   ' + chalk.italic('*No injection*'))
  }
  else {
    console.log('\n   ' + chalk.green(injection))
  }
}

function printQuasarConfOptions ({ quasarConfOptions: conf }) {
  console.log('\n ' + chalk.underline('quasar.conf > framework > config'))
  if (conf === void 0) {
    console.log('\n   ' + chalk.italic('*No configuration options*'))
  }
  else {
    console.log('\n   Property name: ' + chalk.green(conf.propName))
    console.log('   Definition:')
    const filtered = Object.keys(conf.definition).filter(k => !filter || k.includes(filter))
    for (let propName of filtered) {
      console.log()
      printProp(conf.definition[propName], propName, 5)
    }
  }
}

function printFromFlags(api, allowed) {
  for (let printArg in printFlags) {
    if (allowed.includes(printArg)) {
      const _printFns = printFns[printArg]
      for (let printFunc of _printFns)
        printFunc(api)
    }
    else {
      console.warn(`API with type ${api.type} doesn't have an entry for ${printArg}.`)
    }
  }
}

const printFns = {
  props: [printProperties],
  slots: [printSlots, printScopedSlots],
  methods: [printMethods],
  events: [printEvents],
  value: [printValue],
  arg: [printArg],
  modifiers: [printModifiers],
  injection: [printInjection],
  quasar: [printQuasarConfOptions]
}

function describe (api) {
  switch (api.type) {
    case 'component':
      if (hasPrintFlags)
        printFromFlags(api, ['props', 'slots', 'events', 'methods'])
      else {
        printProperties(api)
        printSlots(api)
        printScopedSlots(api)
        printEvents(api)
        printMethods(api)
      }
      break

    case 'directive':
      if (hasPrintFlags)
        printFromFlags(api, ['value', 'arg', 'modifiers'])
      else {   
        printValue(api)
        printArg(api)
        printModifiers(api)
      }
      break

    case 'plugin':
      if (hasPrintFlags) {
        printFromFlags(api, ['injection', 'quasar', 'props'])
      }
      else {
        printInjection(api)
        printQuasarConfOptions(api)
        printProperties(api)
        printMethods(api)
      }
      break
  }
}

async function run () {
  const { api, supplier } = await getApi(item)

  console.log()
  console.log(` Describing ${chalk.green(item)} ${api.type} API`)

  if (supplier === void 0) {
    console.log(` ${chalk.italic(`Description is based on your project's Quasar version`)}`)
  }
  else {
    console.log(` ${chalk.italic(`Supplied by "${supplier}" App Extension`)}`)
  }

  describe(api)
  console.log()
}

run()

#!/usr/bin/env node

const parseArgs = require('minimist')
const chalk = require('chalk')

const getApi = require('../lib/helpers/get-api')
const { fatal } = require('../lib/helpers/logger')

const partArgs = {
  p: 'props',
  s: 'slots',
  m: 'methods',
  e: 'events',
  v: 'value',
  a: 'arg',
  M: 'modifiers',
  i: 'injection',
  q: 'quasar',
  d: 'docs'
}

const partArgsKeys = Object.keys(partArgs)

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    f: 'filter',
    ...partArgs
  },
  boolean: ['h', ...partArgsKeys],
  string: ['f']
})

const item = argv._[0]

if (!item || argv.help) {
  console.log(`
  Description
    Describes a component API for project's Quasar version being used

  Usage
    $ quasar describe <component/directive/Quasar plugin>

    # display everything:
    $ quasar describe QIcon

    # displaying only props:
    $ quasar describe QIcon -p
    # displaying props and methods only:
    $ quasar describe QIcon -p -m
    # filtering by "si":
    $ quasar describe QIcon -f si
    # filtering only props by "co":
    $ quasar describe QIcon -p -f co

    # Open docs URL:
    $ quasar describe QIcon -d

  Options
    --filter, -f <filter> Filters the API
    --props, -p           Displays the API props
    --slots, -s           Displays the API slots
    --methods, -m         Displays the API methods
    --events, -e          Displays the API events
    --value, -v           Displays the API value
    --arg, -a             Displays the API arg
    --modifiers, -M       Displays the API modifiers
    --injection, -i       Displays the API injection
    --quasar, -q          Displays the API quasar conf options
    --docs, -d            Opens the docs API URL
    --help, -h            Displays this message
  `)
  process.exit(0)
}

let apiParts = {}

if (partArgsKeys.some(part => argv[part])) {
  Object.values(partArgs).forEach(part => {
    apiParts[part] = argv[part]
  })
}
else {
  Object.values(partArgs).forEach(part => {
    if (part !== 'docs') {
      apiParts[part] = true
    }
  })
}

function getEventParams (event) {
  const params = event.params === void 0 || event.params.length === 0
    ? ''
    : Object.keys(event.params).join(', ')

  return ' -> function(' + params + ')'
}

function getMethodParams (method, noRequired) {
  if (!method.params || method.params.length === 0) {
    return ' ()'
  }

  if (noRequired === true) {
    return ` (${Object.keys(method.params).join(', ')})`
  }

  const params = Object.keys(method.params)
  const optionalIndex = params.findIndex(param => method.params[param].required !== true)

  const str = optionalIndex !== -1
    ? params.slice(0, optionalIndex).join(', ') +
      (optionalIndex < params.length
        ? '[' + (optionalIndex > 0 ? ', ' : '') + params.slice(optionalIndex).join(', ') + ']'
        : '')
    : params.join(', ')

  return ' (' + str + ')'
}

function getMethodReturnValue (method) {
  return ' => ' +
    (!method.returns
      ? 'void 0'
      : method.returns.type
    )
}

function getStringType (type) {
  return Array.isArray(type)
    ? type.join(' | ')
    : type
}

function printProp (prop, propName, indentLevel) {
  let indent = ' '.repeat(indentLevel)

  const type = getStringType(prop.type)

  if (propName !== void 0) {
    console.log(`${indent}${chalk.green(propName)} ${type ? `(${type})` : ''}${type !== 'Function' && prop.required ? chalk.red(' [Required]') : ''}${prop.reactive ? chalk.red(' [Reactive]') : ''}`)

    indentLevel += 2
    indent += '  '
  }

  console.log(`${indent}Description: ${prop.desc}`)
  if (type === 'Function') {
    console.log(`${indent}Function form:${getMethodParams(prop, true)}${getMethodReturnValue(prop)}`)
  }
  if (prop.sync) {
    console.log(`${indent}".sync" modifier required!`)
  }
  if (prop.link) {
    console.log(`${indent}Link: ${prop.link}`)
  }
  if (prop.values) {
    console.log(`${indent}Accepted values: ${prop.values.join(` | `)}`)
  }
  if (prop.default) {
    console.log(`${indent}Default value: ${prop.default}`)
  }
  if (prop.definition) {
    console.log(`${indent}Props:`)
    for (let propName in prop.definition) {
      printProp(prop.definition[propName], propName, indentLevel + 2)
    }
  }
  if (prop.params) {
    console.log(`${indent}Params:`)
    for (let propName in prop.params) {
      printProp(prop.params[propName], propName, indentLevel + 2)
    }
  }
  if (prop.returns) {
    console.log(`${indent}Returns ${getStringType(prop.returns.type)}:`)
    printProp(prop.returns, void 0, indentLevel + 2)
  }
  if (prop.scope) {
    console.log(`${indent}Scope:`)
    for (let propName in prop.scope) {
      printProp(prop.scope[propName], propName, indentLevel + 2)
    }
  }
  if (prop.examples !== void 0) {
    console.log(`${indent}Example${prop.examples.length > 1 ? 's' : ''}:`)
    prop.examples.forEach(example => {
      console.log(`${indent}  ${example}`)
    })
  }
}

function printProperties ({ props }) {
  const keys = Object.keys(props || {})

  console.log('\n ' + chalk.underline('Properties'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No properties*'))
    return
  }

  if (argv.filter) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete props[key]
      }
    })
    if (Object.keys(props).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching properties*'))
      return
    }
  }

  for (let propName in props) {
    console.log()
    printProp(props[propName], propName, 3)
  }
}

function printSlots ({ slots }) {
  const keys = Object.keys(slots || {})

  console.log('\n ' + chalk.underline('Slots'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No slots*'))
    return
  }

  if (argv.filter !== void 0) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete slots[key]
      }
    })
    if (Object.keys(slots).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching slots*'))
      return
    }
  }

  for (let slot in slots) {
    console.log('\n   ' + chalk.green(slot))
    console.log('     ' + slots[slot].desc)
  }
}

function printScopedSlots ({ scopedSlots }) {
  const keys = Object.keys(scopedSlots || {})

  console.log('\n ' + chalk.underline('Scoped Slots'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No scoped slots*'))
    return
  }

  if (argv.filter) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete scopedSlots[key]
      }
    })
    if (Object.keys(scopedSlots).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching scoped slots*'))
      return
    }
  }

  for (let slot in scopedSlots) {
    console.log()
    printProp(scopedSlots[slot], slot, 3)
  }
}

function printEvents ({ events, behavior = {} }) {
  const keys = Object.keys(events || {})

  console.log('\n ' + chalk.underline('Events'))

  if (behavior.$listeners !== void 0) {
    console.log(`\n   ${chalk.italic(behavior.$listeners.desc)}`)
  }

  if (keys.length === 0) {
    if (behavior.$listeners === void 0) {
      console.log('\n   ' + chalk.italic('*No events*'))
    }
    return
  }

  if (argv.filter !== void 0) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete events[key]
      }
    })
    if (Object.keys(events).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching events*'))
      return
    }
  }

  for (let eventName in events) {
    const event = events[eventName]

    console.log('\n   @' + chalk.green(eventName) + getEventParams(event))
    console.log('     Description: ' + event.desc)
    if (!event.params) {
      console.log('     Parameters: ' + chalk.italic('*None*'))
    }
    else {
      console.log('     Parameters:')
      for (let paramName in event.params) {
        printProp(event.params[paramName], paramName, 7)
      }
    }
  }
}

function printMethods ({ methods }) {
  const keys = Object.keys(methods || {})

  console.log('\n ' + chalk.underline('Methods'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No methods*'))
    return
  }

  if (argv.filter !== void 0) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete methods[key]
      }
    })
    if (Object.keys(methods).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching methods*'))
      return
    }
  }

  for (let methodName in methods) {
    const method = methods[methodName]
    console.log('\n   ' + chalk.green(methodName) + getMethodParams(method) + getMethodReturnValue(method))
    console.log('     ' + method.desc)
    if (method.params !== void 0) {
      console.log('     Parameters:')
      for (let paramName in method.params) {
        printProp(method.params[paramName], paramName, 7)
      }
    }

    if (method.returns !== void 0) {
      console.log(`     Returns ${getStringType(method.returns.type)}:`)
      printProp(method.returns, void 0, 7)
    }
  }
}

function printValue ({ value }) {
  console.log('\n ' + chalk.underline('Value'))

  if (value === void 0) {
    console.log('\n   ' + chalk.italic('*No value*'))
  }
  else {
    console.log('\n   Type:', value.type)
    printProp(value, void 0, 3)
  }
}

function printArg ({ arg }) {
  console.log('\n ' + chalk.underline('Arg'))

  if (arg === void 0) {
    console.log('\n   ' + chalk.italic('*No arg*'))
  }
  else {
    console.log('\n   Type:', arg.type)
    printProp(arg, void 0, 3)
  }
}

function printModifiers ({ modifiers }) {
  const keys = Object.keys(modifiers || {})

  console.log('\n ' + chalk.underline('Modifiers'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No modifiers*'))
    return
  }

  if (argv.filter !== void 0) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete modifiers[key]
      }
    })
    if (Object.keys(modifiers).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching modifiers*'))
      return
    }
  }

  for (let modifierName in modifiers) {
    const modifier = modifiers[modifierName]
    console.log('\n   ' + chalk.green(modifierName))
    printProp(modifier, modifierName, 5)
  }
}

function printInjection ({ injection }) {
  console.log('\n ' + chalk.underline('Injection'))

  if (injection === void 0) {
    console.log('\n   ' + chalk.italic('*No injection*'))
  }
  else {
    console.log('\n   ' + chalk.green(injection))
  }
}

function printQuasarConfOptions ({ quasarConfOptions }) {
  const conf = quasarConfOptions !== void 0
    ? quasarConfOptions.definition || {}
    : {}
  const keys = Object.keys(conf)

  console.log('\n ' + chalk.underline('quasar.conf > framework > config'))

  if (keys.length === 0) {
    console.log('\n   ' + chalk.italic('*No configuration options*'))
    return
  }

  if (argv.filter !== void 0) {
    keys.forEach(key => {
      if (key.indexOf(argv.filter) === -1) {
        delete conf[key]
      }
    })
    if (Object.keys(conf).length === 0) {
      console.log('\n   ' + chalk.italic('*No matching configuration options*'))
      return
    }
  }

  console.log('\n   Property name: ' + chalk.green(quasarConfOptions.propName))
  console.log('   Definition:')
  for (let propName in conf) {
    console.log()
    printProp(conf[propName], propName, 5)
  }
}

function describe (api) {
  switch (api.type) {
    case 'component':
      apiParts.quasar === true && printQuasarConfOptions(api)
      apiParts.props === true && printProperties(api)
      apiParts.slots === true && printSlots(api)
      apiParts.slots === true && printScopedSlots(api)
      apiParts.events === true && printEvents(api)
      apiParts.methods === true && printMethods(api)
      break

    case 'directive':
      apiParts.quasar === true && printQuasarConfOptions(api)
      apiParts.value === true && printValue(api)
      apiParts.arg === true && printArg(api)
      apiParts.modifiers === true && printModifiers(api)
      break

    case 'plugin':
      apiParts.injection === true && printInjection(api)
      apiParts.quasar === true && printQuasarConfOptions(api)
      apiParts.props === true && printProperties(api)
      apiParts.methods === true && printMethods(api)
      break
  }

  if (api.meta && api.meta.docsUrl) {
    console.log('\n ' + chalk.underline('Documentation URL'))
    console.log('\n   ' + chalk.green(api.meta.docsUrl))
  }
}

async function run () {
  try {
    const { api, supplier } = await getApi(item)

    console.log()

    if (apiParts.docs) {
      if (api.meta && api.meta.docsUrl) {
        const openBrowser = require('../lib/helpers/open-browser')
        openBrowser({ url: api.meta.docsUrl, wait: false })
      }
      else {
        console.log(` Opening the docs URL also requires "quasar" v1.5+`)
        console.log()
      }
    }
    else {
      console.log(` Describing ${chalk.green(item)} ${api.type} API`)

      if (supplier === void 0) {
        console.log(` ${chalk.italic(`Description is based on your project's Quasar version`)}`)
      }
      else {
        console.log(` ${chalk.italic(`Supplied by "${supplier}" App Extension`)}`)
      }

      describe(api)
      console.log()
    }
  }
  catch (e) {
    fatal(e)
  }
}

run()

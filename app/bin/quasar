#!/usr/bin/env node
const resolveFrom = require('resolve-from')
const path = require('path')
//TODO: Workspace management resolve conflicting modules
const CLI = require('../../cli')
const inversify = require('inversify')

/**
 * Create a basic config for the runner
 */
class CliInjectParams {
  /**
   * Configuration for The Runner
   */
  constructor () {
    /**
     * Should always run start() cmd by default
     * @type {boolean}
     */
    this.auto = process.env.Q_CLI_AUTO || true
    /**
     * Slice the process arguments at this index
     * @type {number}
     */
    this.sliceAt = 2
    /**
     * minimist configuration or false
     * @type {boolean}
     */
    this.parseArgs = false

    this.pkgName = '@quasar/cli'
  }
}
// Decorate
inversify.decorate(inversify.injectable(), CliInjectParams)


/**
 * Basic CLI Runner with a start override. Should find
 * the right package and start it
 */
class CliRunner extends CLI {
  start () {
    require('../lib/node-version-check')
    require('../lib/helpers/cli-error-handling')
    const commands = [
      'dev',
      'build',
      'clean',
      'inspect',
      'extension',
      'mode',
      'info',
      'new',
      'help'
    ]

    let cmd = process.argv[2]

    if (cmd) {
      if (cmd.length === 1) {
        const mapToCmd = {
          d: 'dev',
          b: 'build',
          e: 'extension',
          c: 'clean',
          m: 'mode',
          i: 'info',
          n: 'new',
          h: 'help'
        }
        cmd = mapToCmd[cmd]
      }

      if (commands.includes(cmd)) {
        process.argv.splice(2, 1)
      }
      else {
        if (cmd === '-v' || cmd === '--version') {
          console.log(require('../package.json').version)
          process.exit(0)
        }

        const warn = require('../lib/helpers/logger')('app', 'red')

        warn()
        warn(`Unknown command "${ cmd }"`)
        if (cmd.indexOf('-') === 0) {
          warn(`Command must come before the options`)
        }

        warn()
        cmd = 'help'
      }
    }
    else {
      cmd = 'help'
    }

    require(`./quasar-${cmd}`)
  }
}

// TODO: Iron out this abstraction in vanilla js
// https://github.com/inversify/inversify-vanillajs-helpers

// Decorate
inversify.decorate(inversify.injectable(), CliRunner)
// Inject the configuration to the first parameter
inversify.decorate(inversify.inject('@quasar/cli-base-runtime-config'), CliRunner, 0)

// Declare bindings
let container = new inversify.Container()
container.bind('@quasar/cli-base-runtime-config').to(CliInjectParams)
container.bind('@quasar/cli').to(CliRunner)

// Override example
// container.rebind('@quasar/cli-runtime-config').to(CliInjectTest);

container.get('@quasar/cli')

#!/usr/bin/env node

if (process.env.NODE_ENV === void 0) {
  process.env.NODE_ENV = 'production'
}

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    m: 'mode',
    T: 'target',
    A: 'arch',
    b: 'bundler',
    s: 'skip-pkg',
    i: 'ide',
    d: 'debug',
    h: 'help',
    P: 'publish'
  },
  boolean: ['h', 'd', 'u', 'i'],
  string: ['m', 'T', 'P'],
  default: {
    m: 'spa'
  }
})

if (argv.help) {
  console.log(`
  Description
    Builds distributables of your app.

  Usage
    $ quasar build
    $ quasar build -p <port number>

    $ quasar build -m ssr

    # alias for "quasar build -m cordova -T ios"
    $ quasar build -m ios

    # alias for "quasar build -m cordova -T android"
    $ quasar build -m android

    # passing extra parameters and/or options to
    # underlying "cordova" executable:
    $ quasar build -m ios -- some params --and options --here

  Options
    --mode, -m      App mode [spa|ssr|pwa|cordova|capacitor|electron] (default: spa)
    --target, -T    App target
                      - Cordova (default: all installed)
                        [android|ios|blackberry10|browser|osx|ubuntu|webos|windows]
                      - Capacitor
                        [android|ios]
                      - Electron with default "electron-packager" bundler (default: yours)
                        [darwin|win32|linux|mas|all]
                      - Electron with "electron-builder" bundler (default: yours)
                        [darwin|mac|win32|win|linux|all]
    --publish, -P   Also trigger publishing hooks (if any are specified)
                      - Has special meaning when building with Electron mode and using
                        electron-builder as bundler
    --debug, -d     Build for debugging purposes
    --skip-pkg, -s  Build only UI (skips creating Cordova/Capacitor/Electron executables)
                      - Cordova (it only fills in /src/cordova/www folder with the UI code)
                      - Capacitor (it only fills in /src/capacitor/www folder with the UI code)
                      - Electron (it only creates the /dist/electron/UnPackaged folder)
    --help, -h      Displays this message

    ONLY for Cordova and Capacitor mode:
    --ide, -i       Open IDE (Android Studio / XCode) instead of finalizing with a
                    terminal/console-only build

    ONLY for Electron mode:
    --bundler, -b   Bundler (electron-packager or electron-builder)
                      [packager|builder]
    --arch, -A      App architecture (default: yours)
                      - with default "electron-packager" bundler:
                          [ia32|x64|armv7l|arm64|mips64el|all]
                      - with "electron-builder" bundler:
                          [ia32|x64|armv7l|arm64|all]

    ONLY for electron-builder (when using "publish" parameter):
    --publish, -P  Publish options [onTag|onTagOrDraft|always|never]
                     - see https://www.electron.build/configuration/publish

  `)
  process.exit(0)
}

const ensureArgv = require('../lib/helpers/ensure-argv')
ensureArgv(argv, 'build')

const banner = require('../lib/helpers/banner')
banner(argv, 'build')

if (argv.mode !== 'spa') {
  const installMissing = require('../lib/mode/install-missing')
  installMissing(argv.mode, argv.target)
}

const chalk = require('chalk')

const logger = require('../lib/helpers/logger')
const log = logger('app:build')
const warn = logger('app:build', 'red')

const path = require('path')
const webpack = require('webpack')

const QuasarConfig = require('../lib/quasar-config')
const Generator = require('../lib/generator')
const artifacts = require('../lib/artifacts')
const getQuasarCtx = require('../lib/helpers/get-quasar-ctx')
const extensionRunner = require('../lib/app-extension/extensions-runner')

function parseWebpackConfig (webpackConfig, mode) {
  if (mode === 'ssr') {
    return [ webpackConfig.server, webpackConfig.client, webpackConfig.webserver ]
  }
  if (mode === 'electron') {
    return [ webpackConfig.renderer, webpackConfig.main ]
  }
  return webpackConfig
}

function finalizeBuild (mode, ctx, quasarConfig) {
  let Runner

  if (['cordova', 'capacitor'].includes(mode)) {
    Runner = require('../lib/' + mode)
  }
  else if (argv['skip-pkg'] !== true && mode === 'electron') {
    Runner = require('../lib/electron')
  }

  if (Runner !== void 0) {
    Runner.init(ctx)
    return Runner.build(quasarConfig, argv)
  }

  return Promise.resolve()
}

async function build () {
  const ctx = getQuasarCtx({
    mode: argv.mode,
    target: argv.target,
    arch: argv.arch,
    bundler: argv.bundler,
    debug: argv.debug,
    prod: true,
    publish: argv.publish
  })

  // register app extensions
  await extensionRunner.registerExtensions(ctx)

  const quasarConfig = new QuasarConfig(ctx, { argv })

  try {
    await quasarConfig.prepare()
  }
  catch (e) {
    console.log(e)
    warn(`⚠️  [FAIL] quasar.conf.js has JS errors`)
    process.exit(1)
  }

  await quasarConfig.compile()

  const generator = new Generator(quasarConfig)
  const webpackConfig = quasarConfig.getWebpackConfig()
  const buildConfig = quasarConfig.getBuildConfig()

  let outputFolder = buildConfig.build.packagedDistDir ||
    buildConfig.build.distDir

  artifacts.clean(outputFolder)
  generator.build()

  if (typeof buildConfig.build.beforeBuild === 'function') {
    await buildConfig.build.beforeBuild({ quasarConf: buildConfig })
  }

  // run possible beforeBuild hooks
  await extensionRunner.runHook('beforeBuild', async hook => {
    log(`Extension(${hook.api.extId}): Running beforeBuild hook...`)
    await hook.fn(hook.api, { quasarConf: buildConfig })
  })

  log(chalk.bold(`Building...`))

  webpack(parseWebpackConfig(webpackConfig, argv.mode), async (err, stats) => {
    if (err) { throw err }

    artifacts.add(outputFolder)

    statsArray = stats.stats || [ stats ]
    statsArray.forEach(stat => {
      process.stdout.write('\n\n' + stat.toString({
        colors: true,
        performance: false,
        hash: false,
        assets: true,
        chunks: false,
        chunkModules: false,
        chunkOrigins: false,
        modules: false,
        nestedModules: false,
        moduleAssets: false,
        children: false
      }) + '\n\n')
    })

    statsArray.forEach(stat => {
      if (stat.hasErrors()) {
        warn()
        warn(chalk.red('[FAIL] Build failed with errors. Check log above.'))
        warn()

        process.exit(1)
      }
    })

    finalizeBuild(argv.mode, ctx, quasarConfig).then(async () => {
      outputFolder = argv.mode === 'cordova'
        ? path.join(outputFolder, '..')
        : outputFolder

      banner(argv, 'build', { outputFolder })

      if (typeof buildConfig.build.afterBuild === 'function') {
        await buildConfig.build.afterBuild({ quasarConf: buildConfig })
      }

      // run possible beforeBuild hooks
      await extensionRunner.runHook('afterBuild', async hook => {
        log(`Extension(${hook.api.extId}): Running afterBuild hook...`)
        await hook.fn(hook.api, { quasarConf: buildConfig })
      })

      if (argv.publish !== void 0) {
        const opts = {
          arg: argv.publish,
          distDir: outputFolder,
          quasarConf: buildConfig
        }

        if (typeof buildConfig.build.onPublish === 'function') {
          await buildConfig.build.onPublish(opts)
        }

        // run possible beforeBuild hooks
        await extensionRunner.runHook('onPublish', async hook => {
          log(`Extension(${hook.api.extId}): Running onPublish hook...`)
          await hook.fn(hook.api, opts)
        })
      }
    })
  })
}

build()

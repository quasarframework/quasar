{
  "components": {
    "props": {
      "readonly": {
        "type": "Boolean",
        "desc": "Put component in readonly mode"
      },

      "disable": {
        "type": "Boolean",
        "desc": "Put component in disabled mode"
      },

      "color": {
        "type": "String",
        "desc": "Color name for component from the Quasar Color Palette",
        "examples": [ "primary", "teal-10" ]
      },

      "text-color": {
        "type": "String",
        "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
        "examples": [ "primary", "teal-10" ]
      },

      "dense": {
        "type": "Boolean",
        "desc": "Dense mode; occupies less space"
      },

      "size": {
        "type": "String",
        "desc": "Size in CSS units, including unit name",
        "examples": [ "16px", "2rem" ]
      },

      "dark": {
        "type": "Boolean",
        "desc": "Notify the component that the background is a dark color"
      },

      "icon": {
        "type": "String",
        "desc": "Icon name following Quasar convention; make sure you got the icon library installed",
        "examples": [ "map", "ion-add" ]
      },

      "flat": {
        "type": "Boolean",
        "desc": "Applies a 'flat' design (no default shadow)"
      },

      "bordered": {
        "type": "Boolean",
        "desc": "Applies a default border to the component"
      },

      "square": {
        "type": "Boolean",
        "desc": "Removes border-radius so borders are squared"
      },

      "rounded": {
        "type": "Boolean",
        "desc": "Applies a small standard border-radius for a squared shape of the component"
      },

      "tabindex": {
        "type": "Number or String",
        "desc": "Tabindex HTML attribute value",
        "examples": [ "0", "100" ]
      },

      "transition": {
        "type": "String",
        "desc": "One of Quasar's embedded transitions",
        "examples": [ "fade", "slide-down" ]
      },

      "to": {
        "type": "String or Object",
        "desc": "Equivalent to Vue Router <router-link> 'to' property",
        "examples": [
          "/home/dashboard",
          "{ name: 'my-route-name' }"
        ]
      },

      "exact": {
        "type": "Boolean",
        "desc": "Equivalent to Vue Router <router-link> 'exact' property"
      },

      "append": {
        "type": "Boolean",
        "desc": "Equivalent to Vue Router <router-link> 'append' property"
      },

      "replace": {
        "type": "Boolean",
        "desc": "Equivalent to Vue Router <router-link> 'replace' property"
      },

      "active-class": {
        "type": "String",
        "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
        "examples": [ "my-active-class" ]
      },

      "exact-active-class": {
        "type": "String",
        "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
        "examples": [ "my-exact-active-class" ]
      },

      "ripple": {
        "type": "Boolean or Object",
        "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
        "default": true,
        "examples": [ false, "{ center: true, color: 'teal' }" ]
      },

      "value": {
        "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive"
      }
    },

    "slots": {
      "default": {
        "desc": "Default slot in the devland unslotted content of the component"
      }
    },

    "scopedSlots": {
      "default": {
        "desc": "Default scoped slot in the devland content of the component"
      }
    },

    "events": {
      "input": {
        "desc": "Emitted when component's model changes; Is also used by v-model",
        "params": {
          "value": {
            "type": "Any",
            "desc": "New model value"
          }
        }
      },

      "show": {
        "desc": "Emitted after component has triggered show()",
        "params": {
          "evt": {
            "type": "Object",
            "desc": "JS event object"
          }
        }
      },

      "before-show": {
        "desc": "Emitted when component triggers show() but before it finishes doing it",
        "params": {
          "evt": {
            "type": "Object",
            "desc": "JS event object"
          }
        }
      },

      "hide": {
        "desc": "Emitted after component has triggered hide()",
        "params": {
          "evt": {
            "type": "Object",
            "desc": "JS event object"
          }
        }
      },

      "before-hide": {
        "desc": "Emitted when component triggers hide() but before it finishes doing it",
        "params": {
          "evt": {
            "type": "Object",
            "desc": "JS event object"
          }
        }
      },

      "click": {
        "desc": "Emitted when user clicks/taps on the component",
        "params": {
          "evt": {
            "type": "Object",
            "desc": "JS event object"
          }
        }
      }
    },

    "methods": {
      "show": {
        "desc": "Triggers component to show",
        "params": {
          "evt": {
            "type": "Object",
            "required": false,
            "desc": "JS event object"
          }
        }
      },

      "hide": {
        "desc": "Triggers component to hide",
        "params": {
          "evt": {
            "type": "Object",
            "required": false,
            "desc": "JS event object"
          }
        }
      },

      "toggle": {
        "params": {
          "evt": {
            "type": "Object",
            "required": false,
            "desc": "JS event object"
          }
        },
        "desc": "Triggers component to toggle between show/hide"
      }
    }
  }
}

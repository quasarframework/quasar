{
  "mixins": [ "mixins/model-toggle" ],

  "props": {
    "side": {
      "type": "String",
      "desc": "Side to attach to",
      "values": [ "left", "right" ],
      "default": "left",
      "examples": [ "right" ]
    },

    "overlay": {
      "type": "Boolean",
      "desc": "Puts drawer into overlay mode (does not occupies space on screen, narrowing the page)"
    },

    "width": {
      "type": "Number",
      "desc": "Width of drawer (in pixels)",
      "default": 300,
      "examples": [ ":width=\"350\"" ]
    },

    "mini": {
      "type": "Boolean",
      "desc": "Puts drawer into mini mode"
    },

    "mini-width": {
      "type": "Number",
      "desc": "Width of drawer (in pixels) when in mini-mode",
      "default": 60,
      "examples": [ ":width=\"100\"" ]
    },

    "breakpoint": {
      "type": "Number",
      "desc": "Breakpoint (in pixels) of layout width up to which mobile mode is used",
      "default": 1023,
      "examples": [ 1200, ":breakpoint=\"1400\"" ]
    },

    "behavior": {
      "type": "String",
      "desc": "Overrides the default dynamic mode into which the drawer is put on",
      "values": [
        "default", "desktop", "mobile"
      ],
      "default": "default",
      "examples": [
        "mobile"
      ]
    },

    "bordered": {
      "extends": "bordered"
    },

    "elevated": {
      "type": "Boolean",
      "desc": "Adds a default shadow to the header"
    },

    "persistent": {
      "type": "Boolean",
      "desc": "Does not auto-closes when app's route changes"
    },

    "show-if-above": {
      "type": "Boolean",
      "desc": "Force drawer to be shown on screen on initial render if the layout width is above breakpoint"
    },

    "content-class": {
      "type": [ "Array", "String", "Object" ],
      "desc": "Class definitions to be attributed to the drawer",
      "examples": [
        "my-special-class",
        ":content-class=\"{ 'my-special-class': <condition> }\""
      ]
    },

    "content-style": {
      "type": [ "Array", "String", "Object" ],
      "desc": "Style definitions to be attributed to the drawer",
      "examples": [
        "background-color: #ff0000",
        ":content-style=\"{ backgroundColor: '#ff0000' }\""
      ]
    },

    "no-swipe-open": {
      "type": "Boolean",
      "desc": "Disables the default behavior where drawer can be swiped into view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature"
    },

    "no-swipe-close": {
      "type": "Boolean",
      "desc": "Disables the default behavior where drawer can be swiped out of view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature"
    }
  },

  "slots": {
    "default": {
      "desc": "Default slot in the devland unslotted content of the component (overriden by 'mini' slot if used and drawer is in mini mode)"
    },

    "mini": {
      "desc": "Content to show when in mini mode (overrides 'default' slot)"
    }
  },

  "events": {
    "on-layout": {
      "desc": "Emitted when drawer toggles between occupying space on page or not",
      "params": {
        "state": {
          "type": "Boolean",
          "desc": "New state"
        }
      }
    },

    "click": {
      "extends": "click",
      "desc": "Emitted when user clicks/taps on the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode"
    },

    "mouseover": {
      "extends": "click",
      "desc": "Emitted when user moves mouse cursor over the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode"
    },

    "mouseout": {
      "extends": "click",
      "desc": "Emitted when user moves mouse cursor out of the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode"
    }
  }
}

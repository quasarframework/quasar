{
  "mixins": [ "components/field/QField" ],

  "props": {
    "value": {
      "type": [ "Number", "String", "Array" ],
      "desc": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "required": true,
      "examples": [ "v-model=\"myModel\"" ]
    },

    "multiple": {
      "type": "Boolean",
      "desc": "Allow multiple selection; Model must be Array"
    },

    "display-value": {
      "type": [ "Number", "String" ],
      "desc": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop",
      "examples": [ "Options: x, y, z"]
    },

    "dropdown-icon": {
      "extends": "icon"
    },

    "options": {
      "type": "Array",
      "desc": "Available options that the user can select from",
      "default": "[]",
      "examples": [
        ":options=\"[ 'BMW', 'Samsung Phone' ]\"",
        ":options=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\""
      ]
    },

    "option-value": {
      "type": [ "Function", "String" ],
      "desc": "Property of option which holds the 'value'",
      "default": "value",
      "examples": [
        "option-value=\"modelNumber\"",
        ":option-value=\"(item) => item.modelNumber\""
      ]
    },

    "option-label": {
      "type": [ "Function", "String" ],
      "desc": "Property of option which holds the 'label'",
      "default": "label",
      "examples": [
        "option-label=\"itemName\"",
        ":option-label=\"(item) => item.itemName\""
      ]
    },

    "option-disable": {
      "type": [ "Function", "String" ],
      "desc": "Property of option which tells it's disabled; The value of the property must be a Boolean",
      "default": "disable",
      "examples": [
        "option-disable=\"cannotSelect\"",
        ":option-disable=\"(item) => item.cannotSelect\""
      ]
    },

    "hide-selected": {
      "type": "Boolean",
      "desc": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects"
    },

    "counter": {
      "type": "Boolean",
      "desc": "Show a counter of selected options on bottom right side"
    },

    "max-values": {
      "type": [ "Number", "String" ],
      "desc": "Allow a maximum number of selections that the user can do",
      "examples": [ "5" ]
    },

    "option-dense": {
      "extends": "dense",
      "desc": "Dense mode for options list; occupies less space"
    },

    "options-dark": {
      "type": "Boolean",
      "desc": "Options menu will be colored with a dark color"
    },

    "options-selected-class": {
      "type": "String",
      "desc": "CSS class name for options that are active/selected",
      "examples": [ "text-orange" ]
    },

    "use-input": {
      "type": "Boolean",
      "desc": "Use an input tag where users can type"
    },

    "use-chips": {
      "type": "Boolean",
      "desc": "Use QChip to show what is currently selected"
    },

    "map-options": {
      "type": "Boolean",
      "desc": "Try to map labels of model from 'options' Array; has a small performance penalty"
    },

    "emit-value": {
      "type": "Boolean",
      "desc": "Update model with the value of the selected option instead of the whole option"
    },

    "input-debounce": {
      "type": [ "Number", "String" ],
      "desc": "Debounce the input model update with an amount of milliseconds",
      "default": 500,
      "examples": [ 650 ]
    },

    "expand-besides": {
      "type": "Boolean",
      "desc": "Expand the menu on top or bottom of the component, so it won't cover it"
    },

    "autofocus": {
      "type": "Boolean",
      "desc": "Focus component on initial render"
    },

    "transition-show": {
      "extends": "transition",
      "desc": "Transition when showing the menu; One of Quasar's embedded transitions",
      "default": "fade"
    },

    "transition-hide": {
      "extends": "transition",
      "desc": "Transition when hiding the menu; One of Quasar's embedded transitions",
      "default": "fade"
    }
  },

  "slots": {
    "selected": {
      "desc": "Override default selection slot; Suggestion: QChip"
    },

    "no-option": {
      "desc": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>"
    },

    "loading": {
      "desc": "Override default spinner when QSelect is in loading mode; Suggestion: spinners"
    }
  },

  "scopedSlots": {
    "selected": {
      "desc": "Override default selection slot; Suggestion: QChip"
    },

    "option": {
      "desc": "Customize how options are rendered; Suggestion: QItem"
    }
  },

  "events": {
    "input": {
      "extends": "input"
    },

    "remove": {
      "desc": "Emitted when an option is removed from selection",
      "params": {
        "details": {
          "type": "Object",
          "desc": "Removal details",
          "definition": {
            "index": {
              "type": "Number",
              "desc": "Model index at which removal took place",
              "examples": [ 2 ]
            },
            "value": {
              "type": "Any",
              "desc": "The actual value that was removed",
              "__exemption": [ "examples" ]
            }
          }
        }
      }
    },

    "add": {
      "desc": "Emitted when an option is added to the selection",
      "params": {
        "details": {
          "type": "Object",
          "desc": "Addition details",
          "definition": {
            "index": {
              "type": "Number",
              "desc": "Model index at which addition took place",
              "examples": [ 2 ]
            },
            "value": {
              "type": "Any",
              "desc": "The actual value that was added",
              "__exemption": [ "examples" ]
            }
          }
        }
      }
    },

    "new-value": {
      "desc": "Emitted when a new value has been created",
      "params": {
        "inputValue": {
          "type": "String",
          "desc": "What the user typed",
          "examples": [ "phone" ]
        },
        "itemToAddToModel": {
          "type": "Function",
          "desc": "Adds (optional) value to the model; Function (val: null or Any); Do not forget to call it after you validate the newly created value; Call it with no parameters if nothing should be added"
        }
      }
    },

    "filter": {
      "desc": "Emitted when user wants to filter a value",
      "params": {
        "inputValue": {
          "type": "String",
          "desc": "What the user typed",
          "examples": [ "phone" ]
        },
        "doneFn": {
          "type": "Function",
          "desc": "Supply a function which makes the necessary updates"
        },
        "abortFn": {
          "type": "Function",
          "desc": "Call this function if something went wrong"
        }
      }
    },

    "filter-abort": {
      "desc": "Emitted when a filtering was aborted; Probably a new one was requested?"
    }
  }
}

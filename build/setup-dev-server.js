/**
 * Retrieved from vue-hackernews-2.0
 * https://github.com/vuejs/vue-hackernews-2.0
 * License MIT
 */

require('colors')

const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const express = require('express')
const webpack = require('webpack')
const chokidar = require('chokidar')
const clientConfig = require('./webpack.dev.conf')
const serverConfig = require('./webpack.ssr.conf')
const opn = require('opn')
const env = require('./env-utils')


webpack(clientConfig, function (err, stats) {
  if (err) throw err

  process.stdout.write(stats.toString({
    colors: true,
    modules: false,
    children: false,
    chunks: false,
    chunkModules: false
  }) + '\n')
})

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

module.exports = function setupDevServer (app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  const uri = 'http://localhost:8081'

  console.log(' Starting dev server with "' + (process.env.NODE_ENV === 'test' ? 'mat' : (process.argv[2] || env.platform.theme)).bold + '" theme...')
  console.log(' Will listen at ' + uri.bold)

  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template: template.replace(
          '<div id="q-app"></div>', 
          '<!--vue-ssr-outlet-->'
        ),
        clientManifest
      })
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
    quiet: true
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { 
    heartbeat: 5000,
    log: function () {}
  }))

  var staticsPath = path.posix.join(clientConfig.output.publicPath, 'statics/')
  app.use(staticsPath, express.static(path.join(__dirname, '../src/', 'statics')))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}

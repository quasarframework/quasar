{
  "mixins": [ "mixins/form" ],

  "meta": {
    "docsUrl": "https://v1.quasar.dev/vue-components/range"
  },

  "props": {
    "value": {
      "type": "Object",
      "desc": "Model of the component of type { min, max } (both values must be between global min/max); Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "definition": {
        "min": {
          "type": "Number",
          "desc": "Model value for left thumb",
          "examples": [ 2 ]
        },
        "max": {
          "type": "Number",
          "desc": "Model value for right thumb",
          "examples": [ 12 ]
        }
      },
      "examples": [ "v-model=\"positionModel\"" ],
      "category": "model"
    },

    "min": {
      "type": "Number",
      "desc": "Minimum value of the model; Set track's minimum value",
      "default": 0,
      "examples": [ ":min=\"0\"" ],
      "category": "model"
    },

    "max": {
      "type": "Number",
      "desc": "Maximum value of the model; Set track's maximum value",
      "default": 100,
      "examples": [ ":max=\"100\"" ],
      "category": "model"
    },

    "step": {
      "type": "Number",
      "desc": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity",
      "default": 1,
      "examples": [ ":step=\"1\"" ],
      "category": "model"
    },

    "inner-min": {
      "type": "Number",
      "desc": "Inner minimum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be higher or equal to 'min' prop; Defaults to 'min' prop",
      "examples": [ ":inner-min=\"0\"" ],
      "category": "content",
      "addedIn": "v1.17"
    },

    "inner-max": {
      "type": "Number",
      "desc": "Inner maximum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be lower or equal to 'max' prop; Defaults to 'max' prop",
      "examples": [ ":max-value=\"100\"" ],
      "category": "content",
      "addedIn": "v1.17"
    },

    "reverse": {
      "type": "Boolean",
      "desc": "Work in reverse (changes direction)",
      "category": "behavior",
      "addedIn": "v1.5.0"
    },

    "vertical": {
      "type": "Boolean",
      "desc": "Display in vertical direction",
      "category": "behavior",
      "addedIn": "v1.10.0"
    },

    "drag-range": {
      "type": "Boolean",
      "desc": "User can drag range instead of just the two thumbs",
      "category": "content"
    },

    "drag-only-range": {
      "type": "Boolean",
      "desc": "User can drag only the range instead and NOT the two thumbs",
      "category": "content"
    },

    "color": {
      "extends": "color"
    },

    "label": {
      "type": "Boolean",
      "desc": "Popup labels (for left and right thumbs) when user clicks/taps on the slider thumb and moves it",
      "category": "labels"
    },

    "label-color": {
      "extends": "color",
      "desc": "Color name for labels background from the Quasar Color Palette; Applies to both labels, unless specific label color props are used",
      "category": "labels"
    },

    "label-text-color": {
      "extends": "color",
      "desc": "Color name for labels text from the Quasar Color Palette; Applies to both labels, unless specific label text color props are used",
      "category": "labels",
      "addedIn": "v1.1.0"
    },

    "left-label-color": {
      "extends": "color",
      "desc": "Color name for left label background from the Quasar Color Palette",
      "category": "labels"
    },

    "left-label-text-color": {
      "extends": "color",
      "desc": "Color name for left label text from the Quasar Color Palette",
      "category": "labels",
      "addedIn": "v1.1.0"
    },

    "right-label-color": {
      "extends": "color",
      "desc": "Color name for right label background from the Quasar Color Palette",
      "category": "labels"
    },

    "right-label-text-color": {
      "extends": "color",
      "desc": "Color name for right label text from the Quasar Color Palette",
      "category": "labels",
      "addedIn": "v1.1.0"
    },

    "left-label-value": {
      "type": [ "String", "Number" ],
      "desc": "Override default label for min value",
      "examples": [
        ":left-label-value=\"model.min + 'px'\""
      ],
      "category": "labels"
    },

    "right-label-value": {
      "type": [ "String", "Number" ],
      "desc": "Override default label for max value",
      "examples": [
        ":right-label-value=\"model.max + 'px'\""
      ],
      "category": "labels"
    },

    "label-always": {
      "type": "Boolean",
      "desc": "Always display the labels",
      "category": "labels"
    },

    "markers": {
      "type": [ "Boolean", "Number" ],
      "desc": "Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number)",
      "category": "content",
      "examples": [
        "markers",
        ":markers=\"5\""
      ]
    },

    "snap": {
      "type": "Boolean",
      "desc": "Snap thumbs on valid values, rather than sliding freely; Suggestion: use with 'step' prop",
      "category": "content"
    },

    "thumb-path": {
      "type": "String",
      "desc": "Set custom thumbs svg path",
      "default": "M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0",
      "examples": [ "M5 5 h10 v10 h-10 v-10" ],
      "category": "style",
      "addedIn": "v1.5.10"
    },

    "dark": {
      "extends": "dark"
    },

    "dense": {
      "extends": "dense"
    },

    "disable": {
      "extends": "disable"
    },

    "readonly": {
      "extends": "readonly"
    },

    "tabindex": {
      "extends": "tabindex"
    }
  },

  "events": {
    "input": {
      "extends": "input"
    },

    "change": {
      "extends": "input",
      "desc": "Emitted on lazy model value change (after user slides then releases thumb)"
    },

    "pan": {
      "desc": "Triggered when user starts panning on the component",
      "params": {
        "phase": {
          "type": "String",
          "desc": "Phase of panning",
          "values": [ "start", "end" ]
        }
      },
      "addedIn": "v1.14.0"
    }
  },

  "scopedSlots": {
    "markers": {
      "desc": "Slot for adding markers to the QRange selector",
      "scope": {
        "value": {
          "type": "Object",
          "desc": "The model of type { min, max }",
          "definition": {
            "min": {
              "type": "Number",
              "desc": "Smaller end of the range",
              "examples": [ 2 ]
            },
            "max": {
              "type": "Number",
              "desc": "Larger end of the range",
              "examples": [ 12 ]
            }
          },
          "examples": [ "{ min: 2, max: 12 }" ]
        },
        "vertical": {
          "type": "Boolean",
          "desc": "Component is displayed in vertical direction"
        },
        "reverse": {
          "type": "Boolean",
          "desc": "Component works in reverse"
        },
        "editable": {
          "type": "Boolean",
          "desc": "Component is editable"
        },
        "min": {
          "type": "Number",
          "desc": "Minimum value on the track",
          "examples": [ 0 ]
        },
        "max": {
          "type": "Number",
          "desc": "Maximum value on the track",
          "examples": [ 100 ]
        },
        "minValue": {
          "type": "Number",
          "desc": "Minimum value of the model",
          "examples": [ 10 ]
        },
        "maxValue": {
          "type": "Number",
          "desc": "Maximum value of the model",
          "examples": [ 90 ]
        },
        "styleFn": {
          "type": "Function",
          "desc": "Calculates the style (position as %) for a value",
          "params": {
            "value": {
              "type": "Number",
              "desc": "Value for which to calculate the style",
              "examples": [ 25 ]
            }
          },
          "returns": {
            "type": "Object",
            "desc": "Object with prop (the name of the CSS property), value (the value of the CSS property), and style (the full style as text)",
            "definition": {
              "prop": {
                "type": "String",
                "desc": "The name of the CSS property",
                "examples": [ "left", "right", "top", "bottom" ]
              },
              "value": {
                "type": "String",
                "desc": "The value of the CSS property",
                "examples": [ "30%" ]
              },
              "style": {
                "type": "String",
                "desc": "The full style",
                "examples": [ "left: 30%" ]
              }
            },
            "examples": [ "{ prop: 'left', value: '30%', style: 'left: 30%' }" ]
          }
        },
        "setFn": {
          "type": "Function",
          "desc": "Set the internal model (and emits the events if necessary)",
          "params": {
            "model": {
              "type": "Number",
              "desc": "The new value of the model",
              "examples": [ "{ min: 10, max: 45 }" ]
            }
          },
          "returns": null
        },
        "stopEvents": {
          "type": "Object",
          "desc": "Listeners on mousedown and click that can be applied on the markers to stop propagation to the QRange; Can be used as `v-on=\"scope.stopEvents\"`",
          "__exemption": [ "examples" ]
        }
      },
      "addedIn": "v1.16.0"
    }
  }
}

{
  "mixins": [ "composables/private/use-field", "components/input/use-mask", "composables/private/use-form" ],

  "meta": {
    "docsUrl": "https://v2.quasar.dev/vue-components/input"
  },

  "props": {
    "model-value": {
      "extends": "model-value",
      "type": [ "String", "Number", "null", "undefined" ],
      "desc": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
      "examples": [ "v-model=\"myText\"" ]
    },

    "shadow-text": {
      "type": "String",
      "desc": "Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file",
      "examples": [ "rest of the fill value" ],
      "category": "content"
    },

    "type": {
      "type": "String",
      "desc": "Input type",
      "default": "text",
      "values": [
        "text", "password", "textarea", "email", "search",
        "tel", "file", "number", "url", "time", "date"
      ],
      "examples": [ "password" ],
      "category": "general"
    },

    "debounce": {
      "type": [ "String", "Number" ],
      "desc": "Debounce amount (in milliseconds) when updating model",
      "examples": [ "0", "530" ],
      "category": "model"
    },

    "maxlength": {
      "type": [ "String", "Number" ],
      "desc": "Specify a max length of model",
      "examples": [ "12" ],
      "category": "model"
    },

    "autogrow": {
      "type": "Boolean",
      "desc": "Make field autogrow along with its content (uses a textarea)",
      "category": "content"
    },

    "input-class": {
      "type": [ "Array", "String", "Object" ],
      "desc": "Class definitions to be attributed to the underlying input tag",
      "examples": [
        "my-special-class",
        ":input-class=\"{ 'my-special-class': <condition> }\""
      ],
      "category": "style"
    },

    "input-style": {
      "type": [ "Array", "String", "Object" ],
      "desc": "Style definitions to be attributed to the underlying input tag",
      "examples": [
        "background-color: #ff0000",
        ":input-style=\"{ backgroundColor: '#ff0000' }\""
      ],
      "category": "style"
    }
  },

  "events": {
    "update:model-value": {
      "extends": "update:model-value",
      "params": {
        "value": {
          "type": [ "String", "Number", "null" ]
        }
      }
    },

    "focus": {
      "desc": "Emitted when component gets focused",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    },

    "blur": {
      "desc": "Emitted when component loses focus",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    }
  },

  "methods": {
    "focus": {
      "desc": "Focus underlying input tag"
    },

    "blur": {
      "desc": "Lose focus on underlying input tag"
    },

    "select": {
      "desc": "Select input text"
    },

    "getNativeElement": {
      "desc": "Get the native input/textarea DOM Element",
      "returns": {
        "type": "Object",
        "desc": "The underlying native input/textarea DOM Element",
        "__exemption": [ "examples" ]
      }
    }
  }
}

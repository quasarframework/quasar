{
  "props": {
    "readonly": {
      "type": "Boolean",
      "desc": "Put component in readonly mode",
      "category": "state"
    },

    "disable": {
      "type": "Boolean",
      "desc": "Put component in disabled mode",
      "category": "state"
    },

    "color": {
      "type": "String",
      "desc": "Color name for component from the Quasar Color Palette",
      "examples": [ "primary", "teal-10" ],
      "category": "style"
    },

    "text-color": {
      "type": "String",
      "desc": "Overrides text color (if needed); Color name from the Quasar Color Palette",
      "examples": [ "primary", "teal-10" ],
      "category": "style"
    },

    "dense": {
      "type": "Boolean",
      "desc": "Dense mode; occupies less space",
      "category": "style"
    },

    "size": {
      "type": "String",
      "desc": "Size in CSS units, including unit name",
      "examples": [ "16px", "2rem" ],
      "category": "style"
    },

    "dark": {
      "type": "Boolean",
      "desc": "Notify the component that the background is a dark color",
      "category": "style"
    },

    "icon": {
      "type": "String",
      "desc": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix",
      "examples": [
        "map",
        "ion-add",
        "img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg",
        "img:statics/path/to/some_image.png"
      ],
      "category": "content"
    },

    "flat": {
      "type": "Boolean",
      "desc": "Applies a 'flat' design (no default shadow)",
      "category": "style"
    },

    "bordered": {
      "type": "Boolean",
      "desc": "Applies a default border to the component",
      "category": "style"
    },

    "square": {
      "type": "Boolean",
      "desc": "Removes border-radius so borders are squared",
      "category": "style"
    },

    "rounded": {
      "type": "Boolean",
      "desc": "Applies a small standard border-radius for a squared shape of the component",
      "category": "style"
    },

    "tabindex": {
      "type": [ "Number", "String" ],
      "desc": "Tabindex HTML attribute value",
      "examples": [ "0", "100" ],
      "category": "general"
    },

    "transition": {
      "type": "String",
      "desc": "One of Quasar's embedded transitions",
      "examples": [ "fade", "slide-down" ],
      "category": "behavior"
    },

    "value": {
      "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "category": "model"
    },

    "sanitize": {
      "type": "Boolean",
      "default": "false",
      "desc": "Force use of textContent instead of innerHTML to render text; Use it when the text might be unsafe (from user input)",
      "category": "behavior"
    }
  },

  "slots": {
    "default": {
      "desc": "Default slot in the devland unslotted content of the component"
    }
  },

  "scopedSlots": {
    "default": {
      "desc": "Default scoped slot in the devland content of the component"
    }
  },

  "events": {
    "input": {
      "desc": "Emitted when the component needs to change the model; Is also used by v-model",
      "params": {
        "value": {
          "type": "Any",
          "desc": "New model value",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    },

    "show": {
      "desc": "Emitted after component has triggered show()",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    },

    "before-show": {
      "desc": "Emitted when component triggers show() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    },

    "hide": {
      "desc": "Emitted after component has triggered hide()",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    },

    "before-hide": {
      "desc": "Emitted when component triggers hide() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    },

    "click": {
      "desc": "Emitted when user clicks/taps on the component",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "required": true,
          "__exemption": [ "examples" ]
        }
      }
    }
  },

  "methods": {
    "show": {
      "desc": "Triggers component to show",
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    },

    "hide": {
      "desc": "Triggers component to hide",
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    },

    "toggle": {
      "params": {
        "evt": {
          "type": "Object",
          "required": false,
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      },
      "desc": "Triggers component to toggle between show/hide"
    }
  },
  
  "css": {
    "body-font-size": {
      "desc": "Body's font size",
      "type": "size",
      "affects": [{
        "selector": "body",
        "property": "font-size"
      }]
    },
    "body-line-height": {
      "desc": "Body's line height",
      "type": "size",
      "affects": [{
        "selector": "body",
        "property": "line-height"
      }]
    },

    "primary": {
      "desc": "App's primary color",
      "type": "color"
    },
    "secondary": {
      "desc": "App's secondary color",
      "type": "color"
    },
    "accent": {
      "desc": "App's accent color",
      "type": "color"
    },

    "dark-page": {
      "desc": "App's body background on global dark mode",
      "type": "color",
      "affects": [{
        "selector": "body.body--dark",
        "property": "background"
      }]
    },
    "dark": {
      "desc": "App's dark color",
      "type": "color",
      "affects": [{
        "selector": ".bg-dark",
        "property": "background"
      }, {
        "selector": ".text-dark",
        "property": "color"
      }]
    },

    "positive": {
      "desc": "App's positive color",
      "type": "color"
    },
    "negative": {
      "desc": "App's negative color",
      "type": "color"
    },
    "info": {
      "desc": "App's info color",
      "type": "color"
    },
    "warning": {
      "desc": "App's warning color",
      "type": "color"
    },

    "dimmed-background": {
      "desc": "App's dimmed background color",
      "type": "color"
    },
    "light-dimmed-background": {
      "desc": "App's light dimmed background color",
      "type": "color"
    },

    "separator-color": {
      "desc": "App's separator color",
      "type": "color"
    },
    "separator-dark-color": {
      "desc": "App's separator color on dark theme",
      "type": "color"
    },

    "ios-statusbar-height": {
      "type": "size"
    },

    "z-max": {
      "type": "Number",
      "desc": "Z-index for elements above everything else"
    },

    "shadow-transition": {
      "desc": "Shadow transition",
      "type": "transition"
    },
    "inset-shadow": {
      "desc": "Inset shadow",
      "type": "shadow"
    },

    "elevation-umbra": {
      "desc": "Shadow's umbra elevation",
      "type": "color"
    },
    "elevation-penumbra": {
      "desc": "Shadow's penumbra elevation",
      "type": "color"
    },
    "elevation-ambient": {
      "desc": "Shadow's ambient elevation",
      "type": "color"
    },

    "shadow-1": {
      "type": "shadow"
    },
    "shadow-2": {
      "type": "shadow"
    },
    "shadow-3": {
      "type": "shadow"
    },
    "shadow-4": {
			"type": "shadow"
		},
    "shadow-5": {
			"type": "shadow"
		},
    "shadow-6": {
			"type": "shadow"
		},
    "shadow-7": {
			"type": "shadow"
		},
    "shadow-8": {
			"type": "shadow"
		},
    "shadow-9": {
			"type": "shadow"
		},
    "shadow-10": {
			"type": "shadow"
		},
    "shadow-11": {
			"type": "shadow"
		},
    "shadow-12": {
			"type": "shadow"
		},
    "shadow-13": {
			"type": "shadow"
		},
    "shadow-14": {
			"type": "shadow"
		},
    "shadow-15": {
			"type": "shadow"
		},
    "shadow-16": {
			"type": "shadow"
		},
    "shadow-17": {
			"type": "shadow"
		},
    "shadow-18": {
			"type": "shadow"
		},
    "shadow-19": {
			"type": "shadow"
		},
    "shadow-20": {
			"type": "shadow"
		},
    "shadow-21": {
			"type": "shadow"
		},
    "shadow-22": {
			"type": "shadow"
		},
    "shadow-23": {
			"type": "shadow"
		},
    "shadow-24": {
			"type": "shadow"
		},

    "shadow-up-1": {
			"type": "shadow"
		},
    "shadow-up-2": {
			"type": "shadow"
		},
    "shadow-up-3": {
			"type": "shadow"
		},
    "shadow-up-4": {
			"type": "shadow"
		},
    "shadow-up-5": {
			"type": "shadow"
		},
    "shadow-up-6": {
			"type": "shadow"
		},
    "shadow-up-7": {
			"type": "shadow"
		},
    "shadow-up-8": {
			"type": "shadow"
		},
    "shadow-up-9": {
			"type": "shadow"
		},
    "shadow-up-10": {
			"type": "shadow"
		},
    "shadow-up-11": {
			"type": "shadow"
		},
    "shadow-up-12": {
			"type": "shadow"
		},
    "shadow-up-13": {
			"type": "shadow"
		},
    "shadow-up-14": {
			"type": "shadow"
		},
    "shadow-up-15": {
			"type": "shadow"
		},
    "shadow-up-16": {
			"type": "shadow"
		},
    "shadow-up-17": {
			"type": "shadow"
		},
    "shadow-up-18": {
			"type": "shadow"
		},
    "shadow-up-19": {
			"type": "shadow"
		},
    "shadow-up-20": {
			"type": "shadow"
		},
    "shadow-up-21": {
			"type": "shadow"
		},
    "shadow-up-22": {
			"type": "shadow"
		},
    "shadow-up-23": {
			"type": "shadow"
		},
    "shadow-up-24": {
			"type": "shadow"
		},

    "generic-border-radius": {
      "desc": "App's default border radius",
			"type": "size"
		},
    "generic-hover-transition": {
      "desc": "App's default hover transition",
			"type": "transition"
		},
    "typography-font-family": {
      "desc": "App's font family",
			"type": "font-family"
		}

  }
}

#!/usr/bin/env node

const parseArgs = require('minimist')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    i: 'install',
    h: 'help'
  },
  boolean: ['h', 'i']
})

if (argv.help) {
  console.log(`
  Description
    Upgrades all quasar packages to their latest version
    which are compatible with the API that you are currently using.

    Works only in a project folder by upgrading to latest minor versions
    of all quasar related packages.

    This will not upgrade official Quasar App Extensions though.

  Usage
    # checks for upgrades only
    $ quasar upgrade

    # also performs the upgrades
    $ quasar upgrade -i

  Options
    --install, -i  Also perform package upgrades
    --help, -h     Displays this message
  `)
  process.exit(0)
}

const
  fs = require('fs'),
  path = require('path'),
  execSync = require('child_process').execSync,
  { green, red } = require('chalk')

const root = require('../lib/get-project-root')()
const { log, fatal } = require('../lib/logger')

if (!fs.existsSync(path.join(root, 'node_modules'))) {
  fatal('⚠️  Please run "yarn" / "npm install" first\n')
}

const pkg = require(path.join(root, 'package.json'))

function isQuasarPackage (name) {
  if (name === 'quasar') {
    return true
  }

  if (
    name.indexOf('@quasar/') > -1 &&
    name.indexOf('quasar-app-extension') === -1
  ) {
    return true
  }

  return false
}

function getLatestVersion (packageName, curVersion) {
  let version = JSON.parse(
    execSync(
      `npm view ${packageName}@${curVersion} version --json`,
      { stdio: ['ignore', 'pipe', 'pipe'] }
    )
  )

  if (typeof version !== 'string') {
    version = version[version.length - 1]
  }

  return version
}

function upgradeQuasar () {
  const deps = {
    dependencies: [],
    devDependencies: []
  }

  console.log()
  log('Gathering information...')
  console.log()

  let updateAvailable = false

  for (const type of Object.keys(deps)) {
    for (const packageName of Object.keys(pkg[type] || {})) {
      if (isQuasarPackage(packageName) === false) {
        continue
      }

      const json = path.join(root, 'node_modules', packageName, 'package.json')
      const curVersion = fs.existsSync(json)
        ? '^' + require(json).version
        : 'latest'

      const latestVersion = getLatestVersion(packageName, curVersion)

      if (curVersion !== '^' + latestVersion) {
        deps[type].push({
          packageName,
          curVersion,
          latestVersion
        })

        updateAvailable = true

        const current = curVersion === 'latest'
          ? red('Missing!')
          : curVersion.substring(1)

        console.log(` ${green(packageName)}: ${current} → ${latestVersion}`)
      }
    }
  }

  if (!updateAvailable) {
    console.log('  Congrats! All Quasar packages are up to date.\n')
    return
  }

  if (!argv.install) {
    console.log()
    console.log(' Run "quasar upgrade -i" to do the actual upgrade.')
    console.log()
    return
  }

  const packager = require('../lib/node-packager')(root)
  const spawn = require('../lib/spawn')

  for (const type of Object.keys(deps)) {
    if (deps[type].length === 0) {
      continue
    }

    const params = packager === 'yarn'
      ? (type === 'devDependencies' ? [ 'add', '--dev' ] : [ 'add' ])
      : [ `install`, `--save${type === 'devDependencies' ? '--dev' : ''}` ]

    deps[type].forEach(dep => {
      params.push(`${dep.packageName}@^${dep.latestVersion}`)
    })

    console.log()
    spawn(packager, params, root)
  }

  console.log()
  log('Successfully upgraded Quasar packages.\n')
}

upgradeQuasar()


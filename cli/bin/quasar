#!/usr/bin/env node
//TODO: via package maybe? @quasar/cli
const QuasarCLI = require('../index')
require('../lib/node-version-check')

/**
 * Basic CLI Runner with a start override. Should find
 * the right package and start it
 */
class QuasarCLIRunner extends QuasarCLI {
  start () {
    const
      path = require('path'),
      resolveFrom = require('resolve-from')

    //TODO this.cmd
    let cmd = process.argv[2]

    if (cmd === 'c' || cmd === 'create') {
      process.argv.splice(2, 1)
      //TODO this.container.get('@quasar/cli-create')
      require(`./quasar-create`)
    }
    else if (cmd === 's' || cmd  === 'serve') {
      process.argv.splice(2, 1)
      //TODO this.container.get('@quasar/cli-serve')
      require(`./quasar-serve`)
    }
    else {
      //TODO this.container.get('@quasar/app')
      const localFile = resolveFrom.silent(process.cwd(), path.join('@quasar/app/bin/quasar'))

      if (localFile && path.relative(localFile, __filename) !== '') {
        // deferring to local @quasar/app
        require(localFile)
      }
      else {
        // legacy <1.0
        // TODO this.container.get('@quasar/cli')
        const localFile = resolveFrom.silent(process.cwd(), path.join('quasar-cli/bin/quasar'))
        if (localFile && path.relative(localFile, __filename) !== '') {
          // deferring to local quasar-cli
          require(localFile)
        }
        else {
          // TODO this.container.get('@quasar/cli') should resolve legacy quasar-cli runner if no namespaced packages found
          const commands = [
            'info',
            'serve',
            'help'
          ]

          if (cmd) {
            if (cmd.length === 1) {
              const mapToCmd = {
                i: 'info',
                s: 'serve',
                h: 'help'
              }
              cmd = mapToCmd[cmd]
            }

            if (commands.includes(cmd)) {
              process.argv.splice(2, 1)
            }
            else {
              if (cmd === '-v' || cmd === '--version') {
                console.log(require('../package.json').version)
                process.exit(0)
              }

              console.log(`\n ${chalk.red(`Error`)} Unknown command "${ cmd }"`)
              if (cmd.indexOf('-') === 0) {
                console.log(`\n ${chalk.red(`Error`)} Command must come before the options`)
              }

              warn()
              cmd = 'help'
            }
          }
          else {
            cmd = 'help'
          }
          if(cmd === 'help') this.help()
          else require(`./quasar-${cmd}`)
        }
      }
    }
  }
  help(){
    console.log()
    console.log(
      require('fs').readFileSync(
        require('path').join(__dirname, '../assets/logo.art'),
        'utf8'
      )
    )

    console.log(`
  Example usage
    $ quasar <command> <options>

  Help for a command
    $ quasar <command> --help
    $ quasar <command> -h

  Options
    --version, -v Print Quasar CLI version

  Commands
    create        Create a project folder
    info          Display info about your machine
                  (and your App if in a project folder)
    serve         Create an ad-hoc server on App's distributables
    help          Displays this message
`)
  }
}

var isCLI = !module.parent;
var isTesting = process.env.Q_APP_ENV === 'testing' || process.env.NODE_ENV === 'testing'
// Export Class if it was required for extending
// This could include an extra flag for testing
module.exports = isCLI || isTesting
  ? new QuasarCLIRunner({auto:true})
  : QuasarCLIRunner

#!/usr/bin/env node

require('../lib/node-version-check')

const updateNotifier = require('update-notifier')
const pkg = require('../package.json')

updateNotifier({ pkg }).notify()

function getQuasarAppExecutable (which, root) {
  try {
    return require.resolve(which, {
      paths: [ root ]
    })
  }
  catch (e) {
    return false
  }
}

let cmd = process.argv[2]

if (cmd === 'create') {
  process.argv.splice(2, 1)
  require(`../lib/cmd/create.js`)
}
else if (cmd === 'serve') {
  process.argv.splice(2, 1)
  require(`../lib/cmd/serve.js`)
}
else if (cmd === 'upgrade') {
  process.argv.splice(2, 1)
  require(`../lib/cmd/upgrade.js`)
}
else {
  const root = require('../lib/get-project-root')()

  const localFile = root
    ? (
      getQuasarAppExecutable('@quasar/app/bin/quasar', root) ||
      getQuasarAppExecutable('@quasar/app-vite/bin/quasar', root) ||
      getQuasarAppExecutable('@quasar/app-webpack/bin/quasar', root) ||
      getQuasarAppExecutable('quasar-cli/bin/quasar', root) // legacy <1.0
    )
    : void 0

  if (localFile) {
    process.env.QUASAR_CLI_VERSION = require('../package.json').version

    global.quasarCli = {
      help: `
    upgrade       Check (and optionally) upgrade Quasar packages
                    from a Quasar project folder
    serve         Create an ad-hoc server on App's distributables
`
    }

    // deferring to local @quasar/app or pre-v1 quasar-cli
    require(localFile)
  }
  else {
    const commands = [
      'info',
      'help'
    ]

    if (cmd) {
      if (cmd === '-h') {
        cmd = 'help'
      }
      else if (cmd === 'i') {
        cmd = 'info'
      }

      if (commands.includes(cmd)) {
        process.argv.splice(2, 1)
      }
      else {
        if (cmd === '-v' || cmd === '--version' || cmd === '-V') {
          console.log(require('../package.json').version)
          process.exit(0)
        }

        const { red } = require('kolorist')

        require(`../lib/cmd/help.js`)

        console.log(`\n ${red(`Error`)} Unknown command "${ cmd }"`)

        if (cmd.indexOf('-') === 0) {
          console.log(`\n ${red(`Error`)} Command must come before the options`)
        }

        console.log()
        process.exit(1)
      }
    }
    else {
      cmd = 'help'
    }

    require(`../lib/cmd/${cmd}.js`)
  }
}
